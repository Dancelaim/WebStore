@model WowCarry.Domain.Entities.ProductDetails
@Model.ProductName
<div class="panel">

    @using (Html.BeginForm("SaveProduct", "Admin", new { navigateToProdOpt = false },FormMethod.Post))
    {
        <div class="panel-heading">
            <h3> @(@Model.ProductName ?? "Create product")</h3>
            <div class="save-btns">

                <input type="submit" value="Save" class="btn" id="SubmitProduct" />
                <input type="submit" value="Save and go to Product Options" class="btn btn-save" id="goToProdOptions" />
                @Html.ActionLink("Undo and Exit", "Admin", null, new
                {
                    @class = "btn btn-default"
                })
            </div>
            @Html.ValidationSummary()
        </div>
        <div class="panel-body">
            <div class="tabs">
                <div id="tab1" class="tab-title active-title">Product Info</div>
                <div id="tab2" class="tab-title">Descriptions</div>
            </div>
            @Html.HiddenFor(m => m.ProductId)
            <div class="tabs-desc">
                <div class="tab1 active-tab">
                    @foreach (var property in ViewData.ModelMetadata.Properties.Where(p => !p.PropertyName.ToLower().Contains("description") & !p.PropertyName.ToLower().Contains("option")))
                    {
                        string[] toIgnore = { "ProductId", "GamesList", "CategoriesList", "MetaTagTitleList", "productGameNames", "productCategoryNames", "MetaTagTitleNames", "Product" };
                        if (!toIgnore.Contains(property.PropertyName))
                        {
                            <div class="input-block">
                                <label>@(property.DisplayName ?? property.PropertyName):</label>
                                @if (property.PropertyName.Contains("SelectedGame"))
                                {
                                    @Html.DropDownListFor(m => m.SelectedGame, Model.GamesList)
                                    @Html.HiddenFor(m => m.SelectedGame)
                                }
                                else if (property.PropertyName.Contains("SelectedCategory"))
                                {
                                    @Html.DropDownListFor(m => m.SelectedCategory, Model.CategoriesList)
                                    @Html.HiddenFor(m => m.SelectedCategory)
                                }
                                else if (property.PropertyName.Contains("SelectedMetaTagTitle"))
                                {
                                    @Html.DropDownListFor(m => m.SelectedMetaTagTitle, Model.MetaTagTitleList)
                                    @Html.HiddenFor(m => m.SelectedMetaTagTitle)
                                }
                                else
                                {
                                    @Html.Editor(property.PropertyName, new { @class = "form-control", rows = 5 })
                                }
                            </div>
                        }
                    }
                </div>
                <div class="tab2">
                    @foreach (var property in ViewData.ModelMetadata.Properties.Where(p => p.PropertyName.ToLower().Contains("description")))
                    {
                        <div class="description-block">
                            <label>@(property.DisplayName ?? property.PropertyName):</label>
                            @if (!property.PropertyName.Contains("Title"))
                            {
                                @Html.TextArea(property.PropertyName, null, new { @class = "textarea-desc", rows = 3 })
                            }
                            else
                            {
                                @Html.Editor(property.PropertyName, new { @class = "form-control", rows = 5 })
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <div class="save-btns">

                <input type="submit" value="Save" class="btn" id="SubmitProduct" />
                <input type="submit" value="Save and go to Product Options" class="btn btn-save" id="goToProdOptions" />
                @Html.ActionLink("Undo and Exit", "Admin", null, new
                {
                    @class = "btn btn-default"
                })
            </div>
            <div class="clear"></div>
        </div>
    }
</div>
