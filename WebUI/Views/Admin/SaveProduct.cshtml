@model WowCarry.Domain.Entities.ProductDetails

<div class="panel">
    <div class="panel-heading">
        <h3>Create product</h3>
    </div>

    @using (Html.BeginForm("Save", "Admin", FormMethod.Post))
    {
        <div class="panel-body">
            <div class="tabs">
                <div id="tab1" class="tab-title active-title">Product Info</div>
                <div id="tab2" class="tab-title">Descriptions</div>
                <div id="tab3" class="tab-title">Options</div>
            </div>
            @Html.HiddenFor(m => m.ProductId)
            <div class="tabs-desc">
                <div class="tab1 active-tab">
                    @foreach (var property in ViewData.ModelMetadata.Properties.Where(p => !p.PropertyName.ToLower().Contains("description") & !p.PropertyName.ToLower().Contains("option")))
                    {
                        string[] toIgnore = { "ProductId", "GamesList", "CategoriesList", "MetaTagTitleList", "productGameNames", "productCategoryNames", "MetaTagTitleNames", "Product" };
                        if (!toIgnore.Contains(property.PropertyName))
                        {
                            <div class="input-block">
                                <label>@(property.DisplayName ?? property.PropertyName):</label>
                                @if (property.PropertyName.Contains("SelectedGame"))
                                {
                                    @Html.DropDownList("Game Name", Model.GamesList)
                                    @Html.HiddenFor(m => m.SelectedGame)
                                }
                                else if (property.PropertyName.Contains("SelectedCategory"))
                                {
                                    @Html.DropDownList("Category Name", Model.CategoriesList)
                                    @Html.HiddenFor(m => m.SelectedCategory)
                                }
                                else if (property.PropertyName.Contains("SelectedMetaTagTitle"))
                                {
                                    @Html.DropDownList("Meta tag title", Model.MetaTagTitleList)
                                    @Html.HiddenFor(m => m.SelectedMetaTagTitle)
                                }
                                else
                                {
                                    @Html.Editor(property.PropertyName, new { @class = "form-control", rows = 5 })
                                }
                            </div>
                        }
                    }
                </div>
                <div class="tab2">
                    @foreach (var property in ViewData.ModelMetadata.Properties.Where(p => p.PropertyName.ToLower().Contains("description")))
                    {
                        <div class="description-block">
                            <label>@(property.DisplayName ?? property.PropertyName):</label>
                            @if (!property.PropertyName.Contains("Title"))
                            {
                                @Html.TextArea(property.PropertyName, null, new { @class = "textarea-desc", rows = 3 })
                            }
                            else
                            {
                                @Html.Editor(property.PropertyName, new { @class = "form-control", rows = 5 })
                            }
                        </div>
                    }
                </div>
                <div class="tab3">
                    @if (Model.ProductOptions != null)
                    {
                        foreach (var item in Model.ProductOptions)
                        {
                            @Html.Action("OptionsList", new { optionName = item.OptionName, prodId = Model.ProductId })
                        }
                    }
                     <div class="newOptions">
                         <div class="title">Add New Option</div>
                         @Html.DropDownList("Template Options", Model.TemplateOptionsList)
                         <div class="option-add"><span>Add</span></div>
                     </div>
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <input type="submit" value="Save" class="btn" id="Submit"/>
            @Html.ActionLink("Undo and Exit", "Admin", null, new
            {
                @class = "btn btn-default"
            })
        </div>
    }
</div>

<script>
    $(document).ready(function () {
        $(".tab-title").on("click", function () {
            var TabName = $(this).attr("id");
            switch (TabName) {
                case "tab1":
                    $(".tab2, .tab3").removeClass("active-tab");
                    $("#tab2, #tab3").removeClass("active-title");
                    $(".tab1").addClass("active-tab");
                    $("#tab1").addClass("active-title");
                    break;
                case "tab2":
                    $(".tab1, .tab3").removeClass("active-tab");
                    $("#tab1, #tab3").removeClass("active-title");
                    $(".tab2").addClass("active-tab");
                    $("#tab2").addClass("active-title");
                    break;
                case "tab3":
                    $(".tab2, .tab1").removeClass("active-tab");
                    $("#tab2, #tab1").removeClass("active-title");
                    $(".tab3").addClass("active-tab");
                    $("#tab3").addClass("active-title");
                    break;
            }
        })
    });
    $(document).on("click", ".options-head", function () {
        var parentTab = $(this).parents(".options-block");
        bodyTab = parentTab.find(".options-body");

        if (parentTab.hasClass("active_block")) {
            parentTab.removeClass("active_block");
            bodyTab.slideUp();
        } else {
            parentTab.addClass("active_block");
            bodyTab.slideDown();
        }

    })
    $('#Submit').on('click', function () {
        $('#SelectedGame').val($('#Game_Name').val())
        $('#SelectedCategory').val($('#Category_Name').val())
        $('#SelectedMetaTagTitle').val($('#Meta_tag_title').val())
    })
    $('.option-add').on('click', function () {
         $.ajax({
                cache: false,
                type: 'POST',
                url: '@Url.Action("AddOption")',
                data: {
                    optionName: $("#Template_Options").val(),
                    prodId: $("#ProductId").val()
                        },
             success: function (data) {
                 $(".tab3 .newOptions").before(data);
                },
                error: function (ex) {
                    alert('Failed to add option.' + ex);
                }
            });
    })
    $(document).on("click", ".options-head .remove-option", function () {
         $.ajax({
                cache: false,
                type: 'POST',
                url: '@Url.Action("RemoveOption")',
             data: {
                 optionId: $(this).find("#OptionId").val(),
                    prodId: $("#ProductId").val()
                        },
                error: function (ex) {
                    alert('Failed to remove option.' + ex);
                }
         });
        $(this).closest('.options-block').remove();

    })
    $(document).on("click", ".remove-param", function () {
     $.ajax({
            cache: false,
            type: 'POST',
            url: '@Url.Action("RemoveParam")',
         data: {
             optionId: $(this).closest('.options-block').find("#OptionId").val(),
             paramId: $(this).find("#paramId").val()
                    },
            error: function (ex) {
                alert('Failed to remove param.' + ex);
            }
     });
        $(this).closest('.param-fields').remove();

    })
    $(document).ready(function () {
        $('select').selectpicker({
            liveSearch: true
        });
    });

</script>