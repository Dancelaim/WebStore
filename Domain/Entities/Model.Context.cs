//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WowCarry.Domain.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WowCarryEntities : DbContext
    {
        public WowCarryEntities()
            : base("name=WowCarryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductGame> ProductGame { get; set; }
        public virtual DbSet<ProductPrice> ProductPrice { get; set; }
        public virtual DbSet<ProductDescription> ProductDescription { get; set; }
        public virtual DbSet<ProductSubCategory> ProductSubCategory { get; set; }
        public virtual DbSet<HtmlBlocks> HtmlBlocks { get; set; }
        public virtual DbSet<HtmlBlocksChildren> HtmlBlocksChildren { get; set; }
        public virtual DbSet<Realms> Realms { get; set; }
        public virtual DbSet<SEO> SEO { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<TemplateOptions> TemplateOptions { get; set; }
        public virtual DbSet<TempOptionParams> TempOptionParams { get; set; }
        public virtual DbSet<ProductOptionParams> ProductOptionParams { get; set; }
        public virtual DbSet<ProductOptions> ProductOptions { get; set; }
    
        public virtual int Check_db_Version(Nullable<short> script)
        {
            var scriptParameter = script.HasValue ?
                new ObjectParameter("Script", script) :
                new ObjectParameter("Script", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Check_db_Version", scriptParameter);
        }
    
        public virtual int Update_db_Version(Nullable<short> script)
        {
            var scriptParameter = script.HasValue ?
                new ObjectParameter("Script", script) :
                new ObjectParameter("Script", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_db_Version", scriptParameter);
        }
    }
}
